#include <Wire.h>
#include <Servo.h> 

/* Declaracion de los pines de arduino pro mini y su uso*/
#define PIN_LUZ1 2
#define PIN_LUZ2 3
#define PIN_LUZ3 4
#define PIN_LUZ4 5
#define PIN_LUZ5 6
#define PIN_LUZ6 7
#define PIN_LUZ7 8
#define PIN_LUZ8 9
#define PIN_INTENSIDAD_LUZ 10
#define PIN_MOTOR1 11
#define PIN_MOTOR2 12
#define PIN_MOTOR3 13
#define PIN_MOTOR4 14
#define PIN_MOTOR5 15
#define PIN_SENSOR1 16
#define PIN_SENSOR2 17


/* Declaracion de variables globales */

Servo servoCejaIzqI;                    // Servo Ceja Izquierda Interior 
Servo servoCejaIzqE;                    // Servo Ceja Izquierda Exterior
Servo servoCejaDrcI;                    // Servo Ceja Derecha Interior 
Servo servoCejaDrcE;                    // Servo Ceja Derecha Exterior

const int dir=0xC0;                    // Direccion I2C del microcontrolador
int true_dir;                          // Direccion traducida para I2C de 7 bis


const int sizeFiltro=5;
int iFiltro=0;
double B[sizeFiltro]={0,0,0,0,0};	// Buffer con las últimas 5 medidas
const double A[sizeFiltro]={0.2, 0.2, 0.2, 0.2, 0.2};  // Ponderación de cada valor en el resultado actual


// ---------------------------------------------------
// Configuracion Inicial 
// ---------------------------------------------------
void setup()
{
  
  analogReference(DEFAULT);            // Referencia analogica de 5 voltios
  
  servoCejaIzqI.attach(PIN_MOTOR1);    // Asignamos cada pin a cada servo         
  servoCejaIzqE.attach(PIN_MOTOR2);
  servoCejaDrcI.attach(PIN_MOTOR3);          
  servoCejaDrcE.attach(PIN_MOTOR4);
  
  true_dir= dir >> 1;                   // Convertimos la direccion I2C a formato de 7 bits
  Wire.begin(true_dir);                 // Asinamos la direccion al microcontrolador              
  Wire.onRequest(requestEvent);         // Evento para cuando el master pida datos
  Wire.onReceive(receiveEvent);         // Evento para cuando el master envia datos

  Serial.begin(9600);                   //Iniciamos puerto serie a 96000 baudios

}

// ---------------------------------------------------
// Programa principal 
// ---------------------------------------------------
void loop()
{
 
 
    cm = distance (PIN_SENSOR1);


}

double light(int PIN_SENSOR1)
{


}
// ---------------------------------------------------
// Convierte la medida en cm
// ------------------------------------------------
double distance(PIN_SENSOR1)
{
	int sensor = analogRead(PIN_SENSOR1);  // Leemos el sensor
    
	B[iFiltro] = 6599.0171345645 * pow(sensor, -1.0789432859);  // Obtenemos el valor en cm
    
	double cm = A[0]*B[(iFiltro)] + A[1]*B[(iFiltro+1)%sizeFiltro] + A[2]*B[(iFiltro+2)%sizeFiltro] + A[3]*B[(iFiltro+3)%sizeFiltro]+ 
		  A[4]*B[(iFiltro+4)%sizeFiltro]; 
    
    iFiltro= iFiltro++;
    iFiltro= iFiltro % sizeFiltro;

}

// ---------------------------------------------------
// Se ejecuta cuando el master pide un dato
// ---------------------------------------------------
void requestEvent()
{
  if(cm > 256)
     cm = 0;
     
  Wire.write((unsigned char)cm1);   
}

// ---------------------------------------------------
// Se ejecuta cuando el master envia un dato
// ---------------------------------------------------
void receiveEvent(int howMany)
{
    op = Wire.read(); // 
    Serial.print(op);      // 
}
